36-51
// const json = `
// {
//     "artist": "Ice Cube",
//     "artistID": "test_ARTIST_Id_123",
//     "title": "It Was A Good Day",
//     "content_type": "audio/mp3",
//     "song_url": "https://storage.googleapis.com/trv_test/TroveMusic/rap/ice_cube/the_predator/it_was_a_good_day/07_it_was_a_good_day.mp3",
//     "img_url": "https://storage.googleapis.com/trv_test/TroveMusic/rap/ice_cube/the_predator/cover/cover.jpg",
//     "duration": 280,
//     "hot-spot_start": 23,
//     "genre": "rap",
//     "genres": ["rap", "feel_good"],
//     "explicit": true
// }
// `;
// const obj = JSON.parse(json);


 {/* Song Image 
          <div className='hidden'>
            <img src="http://localhost:3000/cover.jpg"></img>
          </div> */}

              {/* Song/Artist Name 
          <div className='hidden'>
            <div><p>{obj.title}</p></div>
            <div className='hidden'>{obj.explicit ? <MdExplicit /> : <p />}</div>
            <div><p>{obj.artist}</p></div>
          </div> */}

              {/* Media Controls 
          <div className=' hidden grid grid-flow-col'>
            <button><CgArrowLongLeftR /></button>
            <button onClick={togglePlayPause}>
              {isPlaying ? <BsPause /> : <BsPlay />}
            </button>
            <button><CgArrowLongRightR /></button>
          </div> */}

              {/* Media Time 
          <div className='hidden'>
            <div> {calculateTime(currentTime)} </div>
            <div>{(duration && !isNaN(duration)) && calculateTime(duration)}</div>
          </div> */}

              {/* Like Btn 
          <button className='hidden' onClick={toggleLiked}>{isLiked ? <FaHeart /> : <FaRegHeart />}</button>
          */}
              {/* Extra Buttons 
          <div className='hidden phone_md:hidden' >

            <button ><FaShareSquare /></button>
            <button ><MdOutlineQueueMusic /></button>
          </div>
          */}
              {/* Mute Btn
          <div className='hidden'>
            <button onClick={toggleMute}>
              {isMuted ? <BiVolumeFull /> : <BiVolumeMute />}
            </button>
          </div>
          */}
              {/* Vol*/}
              {/* <div className='hidden'>
            <input type="range" ref={volumeRef} defaultValue="50" onChange={changeVolumeLevel}></input>
          </div> */}



          ----------------------

          

const MusicBar = ({ songUrl }) => {
  const [isFullscreen, setFullscreen] = useState(false);

  //context
  const { currentSong } = React.useContext(MusicContext);

  //state
  const [isPlaying, setIsPlaying] = useState(false);
  const [duration, setDuration] = useState(0);
  const [currentTime, setCurrentTime] = useState(0);
  const [volumeLevel, setVolumeLevel] = useState(0);
  const [isMuted, setIsMuted] = useState(true);
  //isMuted is totally screwed... but it works. So i'm just gonna leave it as it is <3 sorry if it's confusing (I don't actually know what's happening lol)
  const [prevVolume, updatePrevVol] = useState(0.5);
  const [isLiked, setIsLiked] = useState(false);
  const [isExplicit, setExplicit] = useState(true);
  //refrences
  const audioPlayer = useRef(); //reference audio component
  const progressBar = useRef(); //reference progress bar
  const FCprogressBar = useRef(); //reference progress bar
  const animationRef = useRef();
  const volumeRef = useRef();

  useEffect(() => {
    const seconds = Math.floor(audioPlayer.current.duration);
    setDuration(seconds); // 45.26
    progressBar.current.max = seconds;
    FCprogressBar.current.max = seconds;
  }, [audioPlayer?.current?.loadedmetadata, audioPlayer?.current?.readyState]);

  useEffect(() => {
    // Reset audioPlayer.current.src and audioPlayer.current.load() to load a new song
    audioPlayer.current.src = songUrl;
    audioPlayer.current.load();
  }, [songUrl]);

  const calculateTime = (secs) => {
    const minutes = Math.floor(secs / 60);
    const returnedMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;
    const seconds = Math.floor(secs % 60);
    const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;

    return `${returnedMinutes} : ${returnedSeconds}`;
  };

  const togglePlayPause = () => {
    const prevValue = isPlaying;
    setIsPlaying(!prevValue);
    changeVolumeLevel();
    if (!prevValue) {
      audioPlayer.current.play();
      animationRef.current = requestAnimationFrame(whilePlaying); //fix this
    } else {
      audioPlayer.current.pause();
      cancelAnimationFrame(animationRef.current);
    }
  };

  const toggleMute = () => {
    const prevValue = isMuted;
    updatePrevVol(audioPlayer.current.volume);
    setIsMuted(!prevValue);
    if (!prevValue) {
      console.log(`isMuted ` + isMuted);
      console.log(`unmuting!`);
      // console.log(`previous vol: ` + prevVolume);
      audioPlayer.current.volume = prevVolume;
      setVolumeLevel(audioPlayer.current.volume);
      volumeRef.current.value = prevVolume * 100;
      // console.log(`current vol:` + (volumeLevel * 1000));
    } else {
      console.log(`isMuted ` + isMuted);
      console



